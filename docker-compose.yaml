services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: dog-rescue-db
    environment:
      POSTGRES_DB: dog_rescue_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - dog-rescue-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d dog_rescue_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/src/Dockerfile
    container_name: dog-rescue-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://postgres:postgres@database:5432/dog_rescue_db
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      SERVER_URL: http://localhost:5000
    ports:
      - "5000:5000"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      database:
        condition: service_healthy
    networks:
      - dog-rescue-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: app/Dockerfile
    container_name: dog-rescue-frontend
    ports:
      - "8080:8080"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - dog-rescue-network

  # Optional: PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dog-rescue-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dogrescue.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - database
    networks:
      - dog-rescue-network
    profiles:
      - debug

volumes:
  postgres_data:
  uploads:

networks:
  dog-rescue-network:
    driver: bridge