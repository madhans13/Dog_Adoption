name: CI - Build & Push Docker Images

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # -------- GET LATEST VERSIONS FROM DOCKER HUB --------
      - name: Get latest frontend version from Docker Hub
        id: frontend_version
        run: |
          # Get latest version tag from Docker Hub API
          REPO="${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend"
          echo "Fetching latest version for $REPO..."
          
          # Fetch tags and extract version numbers (assuming format: v1, v2, v3, etc.)
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$REPO/tags/?page_size=100" | \
            jq -r '.results[].name' | \
            grep -E '^v[0-9]+$' | \
            sed 's/v//' | \
            sort -n | \
            tail -1)
          
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            echo "No existing versions found, starting from 19"
            LATEST_VERSION=19
          fi
          
          NEW_VERSION=$((LATEST_VERSION + 1))
          echo "Latest frontend version: v$LATEST_VERSION"
          echo "New frontend version: v$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Get latest backend version from Docker Hub
        id: backend_version
        run: |
          # Get latest version tag from Docker Hub API
          REPO="${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend"
          echo "Fetching latest version for $REPO..."
          
          # Fetch tags and extract version numbers (assuming format: v1, v2, v3, etc.)
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$REPO/tags/?page_size=100" | \
            jq -r '.results[].name' | \
            grep -E '^v[0-9]+$' | \
            sed 's/v//' | \
            sort -n | \
            tail -1)
          
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            echo "No existing versions found, starting from 13"
            LATEST_VERSION=13
          fi
          
          NEW_VERSION=$((LATEST_VERSION + 1))
          echo "Latest backend version: v$LATEST_VERSION"
          echo "New backend version: v$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # -------- BUILD AND PUSH IMAGES --------
      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend:v${{ steps.frontend_version.outputs.new_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend:v${{ steps.backend_version.outputs.new_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # -------- SUMMARY --------
      - name: Build Summary
        run: |
          echo "ðŸš€ Build completed successfully!"
          echo "ðŸ“¦ Frontend: ${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend:v${{ steps.frontend_version.outputs.new_version }}"
          echo "ðŸ“¦ Backend: ${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend:v${{ steps.backend_version.outputs.new_version }}"