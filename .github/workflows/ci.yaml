name: CI/CD - Smart Build & Deploy

on:
  push:
    branches:
      - master
    paths:
      - 'app/**'
      - 'src/**'
      - 'backend/**'
      - 'k8s/**'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.ts'
      - 'tailwind.config.js'
      - 'docker-compose.yaml'
      - '.github/workflows/**'
  pull_request:
    branches:
      - master
    paths:
      - 'app/**'
      - 'src/**'
      - 'backend/**'
      - 'k8s/**'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.ts'
      - 'tailwind.config.js'
      - 'docker-compose.yaml'
      - '.github/workflows/**'

env:
  NODE_VERSION: '20'
  REGISTRY: docker.io

jobs:
  # ==================== DETECT CHANGES ====================
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      k8s: ${{ steps.changes.outputs.k8s }}
      shared: ${{ steps.changes.outputs.shared }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'app/**'
              - 'src/**'
              - 'package.json'
              - 'package-lock.json'
              - 'vite.config.ts'
              - 'tailwind.config.js'
            backend:
              - 'backend/**'
              - 'package.json'
              - 'package-lock.json'
            k8s:
              - 'k8s/**'
              - 'docker-compose.yaml'
            shared:
              - '.github/workflows/**'
              - 'README.md'
              - 'docker-compose.yaml'

  # ==================== FRONTEND TESTS ====================
  test-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true' || github.event_name == 'pull_request'
    strategy:
      matrix:
        node-version: [20]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - run: npm ci --legacy-peer-deps
      - run: npm run lint || true
      - run: npm test -- --coverage --watchAll=false --passWithNoTests || true
      - run: npm run build
      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

  # ==================== BACKEND TESTS ====================
  test-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true' || github.event_name == 'pull_request'
    strategy:
      matrix:
        node-version: [20]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        options: >-
          --health-cmd "pg_isready -U testuser -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - run: npm ci --legacy-peer-deps
      - run: npm run lint:backend || true
      - run: npm run test:backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
          PORT: 3001
        continue-on-error: true
      - uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # ==================== SECURITY SCAN ====================
  security-scan:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-frontend, test-backend]
    if: |
      always() &&
      (needs.detect-changes.outputs.frontend == 'true' ||
       needs.detect-changes.outputs.backend == 'true' ||
       needs.detect-changes.outputs.k8s == 'true') &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped') &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped')
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      - uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # ==================== BUILD & PUSH FRONTEND ====================
  build-frontend:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-frontend, security-scan]
    if: |
      always() &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/master' &&
      needs.detect-changes.outputs.frontend == 'true' &&
      needs.detect-changes.outputs.backend != 'true' &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - id: frontend_version
        run: |
          REPO="${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend"
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$REPO/tags/?page_size=100" |
            jq -r '.results[].name' |
            grep -E '^v[0-9]+$' |
            sed 's/v//' |
            sort -n |
            tail -1)
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            LATEST_VERSION=19
          fi
          NEW_VERSION=$((LATEST_VERSION + 1))
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend:v${{ steps.frontend_version.outputs.new_version }}
            ${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      - run: |
          sed -i "s|\(image: .*/dog-adoption-frontend:\).*|\1v${{ steps.frontend_version.outputs.new_version }}|" k8s/Frontend/Deployment.yaml
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add k8s/Frontend/Deployment.yaml
          git commit -m "Update frontend image to v${{ steps.frontend_version.outputs.new_version }}" || echo "No changes to commit"
          git push

  # ==================== BUILD & PUSH BACKEND ====================
  build-backend:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-backend, security-scan]
    if: |
      always() &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/master' &&
      needs.detect-changes.outputs.backend == 'true' &&
      needs.detect-changes.outputs.frontend != 'true' &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - id: backend_version
        run: |
          REPO="${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend"
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$REPO/tags/?page_size=100" |
            jq -r '.results[].name' |
            grep -E '^v[0-9]+$' |
            sed 's/v//' |
            sort -n |
            tail -1)
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            LATEST_VERSION=13
          fi
          NEW_VERSION=$((LATEST_VERSION + 1))
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/src/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend:v${{ steps.backend_version.outputs.new_version }}
            ${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
      - run: |
          sed -i "s|\(image: .*/dog-adoption-backend:\).*|\1v${{ steps.backend_version.outputs.new_version }}|" k8s/Backend/Deployment.yaml
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add k8s/Backend/Deployment.yaml
          git commit -m "Update backend image to v${{ steps.backend_version.outputs.new_version }}" || echo "No changes to commit"
          git push

  # ==================== BUILD & PUSH BOTH ====================
  build-both:
    runs-on: ubuntu-latest
    needs: [detect-changes, test-frontend, test-backend, security-scan]
    if: |
      always() &&
      github.event_name == 'push' &&
      github.ref == 'refs/heads/master' &&
      needs.detect-changes.outputs.frontend == 'true' &&
      needs.detect-changes.outputs.backend == 'true' &&
      (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped') &&
      (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') &&
      (needs.security-scan.result == 'success' || needs.security-scan.result == 'skipped')
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - id: frontend_version
        run: |
          REPO="${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend"
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$REPO/tags/?page_size=100" |
            jq -r '.results[].name' |
            grep -E '^v[0-9]+$' |
            sed 's/v//' |
            sort -n |
            tail -1)
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            LATEST_VERSION=19
          fi
          NEW_VERSION=$((LATEST_VERSION + 1))
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - id: backend_version
        run: |
          REPO="${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend"
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$REPO/tags/?page_size=100" |
            jq -r '.results[].name' |
            grep -E '^v[0-9]+$' |
            sed 's/v//' |
            sort -n |
            tail -1)
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            LATEST_VERSION=13
          fi
          NEW_VERSION=$((LATEST_VERSION + 1))
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend:v${{ steps.frontend_version.outputs.new_version }}
            ${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/src/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend:v${{ steps.backend_version.outputs.new_version }}
            ${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - run: |
          sed -i "s|\(image: .*/dog-adoption-frontend:\).*|\1v${{ steps.frontend_version.outputs.new_version }}|" k8s/Frontend/Deployment.yaml
          sed -i "s|\(image: .*/dog-adoption-backend:\).*|\1v${{ steps.backend_version.outputs.new_version }}|" k8s/Backend/Deployment.yaml
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add k8s/Frontend/Deployment.yaml k8s/Backend/Deployment.yaml
          git commit -m "Update frontend to v${{ steps.frontend_version.outputs.new_version }} and backend to v${{ steps.backend_version.outputs.new_version }}" || echo "No changes to commit"
          git push

  # ==================== NOTIFY ====================
  notify:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-both]
    if: always()
    steps:
      - run: |
          if [ "${{ needs.build-frontend.result }}" == "success" ] || [ "${{ needs.build-backend.result }}" == "success" ] || [ "${{ needs.build-both.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
            echo "Frontend: ${{ needs.build-frontend.result }}"
            echo "Backend: ${{ needs.build-backend.result }}"
            echo "Both: ${{ needs.build-both.result }}"
          else
            echo "❌ Deployment failed!"
            echo "Frontend: ${{ needs.build-frontend.result }}"
            echo "Backend: ${{ needs.build-backend.result }}"
            echo "Both: ${{ needs.build-both.result }}"
            exit 1
          fi
