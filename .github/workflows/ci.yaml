name: CI/CD - Test, Build & Push Docker Images

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  # ==================== TESTING JOBS ====================
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend linting
        run: npm run lint
        continue-on-error: false

      - name: Run frontend tests
        run: npm run test -- --coverage --watchAll=false

      - name: Upload frontend test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Build frontend for testing
        run: npm run build

  test-backend:
    runs-on: ubuntu-latest
    services:
      # Add database service if needed (MongoDB, PostgreSQL, etc.)
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        options: >-
          --health-cmd "echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install backend dependencies
        run: npm ci

      - name: Run backend linting
        run: |
          npx eslint backend/ --ext .js,.ts
          # or if you have it as a script: npm run lint:backend

      - name: Run backend tests
        env:
          NODE_ENV: test
          DATABASE_URL: mongodb://testuser:testpass@localhost:27017/testdb
          PORT: 3001
        run: |
          npm run test:backend
          # or if using jest directly: npx jest backend/ --coverage

      - name: Upload backend test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: backend-coverage

  # ==================== SECURITY SCAN ====================
  security-scan:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # ==================== BUILD & DEPLOY ====================
  build-and-push:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # -------- GET LATEST VERSIONS FROM DOCKER HUB --------
      - name: Get latest frontend version from Docker Hub
        id: frontend_version
        run: |
          REPO="${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend"
          echo "Fetching latest version for $REPO..."
          
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$REPO/tags/?page_size=100" | \
            jq -r '.results[].name' | \
            grep -E '^v[0-9]+$' | \
            sed 's/v//' | \
            sort -n | \
            tail -1)
          
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            echo "No existing versions found, starting from 19"
            LATEST_VERSION=19
          fi
          
          NEW_VERSION=$((LATEST_VERSION + 1))
          echo "Latest frontend version: v$LATEST_VERSION"
          echo "New frontend version: v$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Get latest backend version from Docker Hub
        id: backend_version
        run: |
          REPO="${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend"
          echo "Fetching latest version for $REPO..."
          
          LATEST_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/$REPO/tags/?page_size=100" | \
            jq -r '.results[].name' | \
            grep -E '^v[0-9]+$' | \
            sed 's/v//' | \
            sort -n | \
            tail -1)
          
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" = "null" ]; then
            echo "No existing versions found, starting from 13"
            LATEST_VERSION=13
          fi
          
          NEW_VERSION=$((LATEST_VERSION + 1))
          echo "Latest backend version: v$LATEST_VERSION"
          echo "New backend version: v$NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # -------- BUILD AND PUSH IMAGES --------
      - name: Build & Push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./app/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend:v${{ steps.frontend_version.outputs.new_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build & Push Backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend:v${{ steps.backend_version.outputs.new_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # -------- SUMMARY --------
      - name: Build Summary
        run: |
          echo "üéâ CI/CD Pipeline completed successfully!"
          echo "‚úÖ Tests passed"
          echo "üîí Security scan completed"
          echo "üì¶ Frontend: ${{ secrets.DOCKER_USERNAME }}/dog-adoption-frontend:v${{ steps.frontend_version.outputs.new_version }}"
          echo "üì¶ Backend: ${{ secrets.DOCKER_USERNAME }}/dog-adoption-backend:v${{ steps.backend_version.outputs.new_version }}"

  # ==================== NOTIFICATION ====================
  notify:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.build-and-push.result }}" == "success" ]; then
            echo "‚úÖ Deployment successful!"
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi